# src/database.py
"""Database connection and session management using SQLAlchemy asyncpg."""

import os
import sys

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏ –∑–∞–≥—Ä—É–∑–∫–∞ .env ---
from dotenv import load_dotenv

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ (src/)
# –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
dotenv_path = os.path.join(os.path.dirname(__file__), "..", ".env")
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
# dotenv_path = "/Users/admin/Desktop/Maximchik/news-mvp/.env"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª .env
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"‚úÖ .env file loaded from: {dotenv_path}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
else:
    print(f"‚ö†Ô∏è .env file NOT FOUND at: {dotenv_path}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    load_dotenv()
    print("üîÑ Trying to load .env from current working directory...")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

# --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ .env ---

DATABASE_URL = os.getenv("DATABASE_URL")
print(
    f"üîç DATABASE_URL from environment: {'SET' if DATABASE_URL else 'NOT SET'}"
)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

if not DATABASE_URL:
    # –í–ê–ñ–ù–û: –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É. –ü–æ–∑–≤–æ–ª–∏–º Alembic —Ä–∞–±–æ—Ç–∞—Ç—å —Å sqlalchemy.url –∏–∑ alembic.ini
    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏ —Ç–∞–º –Ω–µ—Ç URL.
    print(
        "‚ö†Ô∏è DATABASE_URL is not set in environment. Alembic might use sqlalchemy.url from alembic.ini."
    )
    # raise ValueError("DATABASE_URL environment variable is not set.")

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import declarative_base, sessionmaker

# –°–æ–∑–¥–∞–µ–º engine —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DATABASE_URL –¥–æ—Å—Ç—É–ø–µ–Ω
if DATABASE_URL:
    engine = create_async_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
else:
    engine = None  # –ò–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å "–∑–∞–≥–ª—É—à–∫—É" –¥–ª—è Alembic, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

AsyncSessionFactory = (
    sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    if engine
    else None
)

Base = declarative_base()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥: get_db_session –∏ —Ç.–¥.)


# –ò—Å–ø—Ä–∞–≤–∏–º get_db_session, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –ø–∞–¥–∞–ª–∞, –µ—Å–ª–∏ engine –Ω–µ —Å–æ–∑–¥–∞–Ω
async def get_db_session():
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î –≤ FastAPI endpoints.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å `Depends(get_db_session)`.
    """
    if not AsyncSessionFactory:
        raise RuntimeError("Database engine is not configured. Check DATABASE_URL.")

    async with AsyncSessionFactory() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
